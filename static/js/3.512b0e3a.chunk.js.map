{"version":3,"file":"static/js/3.512b0e3a.chunk.js","mappings":"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","sources":["webpack://chat/./src/components/PersonalChat/PersonalChat.module.css?7592","redux/Api.js","components/PersonalChat/PersonalChat.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"PersonalChat_content__yxpt8\",\"item\":\"PersonalChat_item__+h5aV\",\"user\":\"PersonalChat_user__kJixZ\",\"avatarWrap\":\"PersonalChat_avatarWrap__Ktjpq\",\"avatar\":\"PersonalChat_avatar__45uKM\",\"itemCheck\":\"PersonalChat_itemCheck__Hvzjj\",\"isCheck\":\"PersonalChat_isCheck__brTsv PersonalChat_itemCheck__Hvzjj\",\"isNotCheck\":\"PersonalChat_isNotCheck__OJmxo PersonalChat_itemCheck__Hvzjj\",\"name\":\"PersonalChat_name__4i9zO\",\"chat\":\"PersonalChat_chat__sbyfU\",\"msgList\":\"PersonalChat_msgList__GAvZ8\",\"msg\":\"PersonalChat_msg__M31B3\",\"msgWrapReq\":\"PersonalChat_msgWrapReq__nGInh\",\"msgWrapRes\":\"PersonalChat_msgWrapRes__7Zqfo\",\"msgTextReq\":\"PersonalChat_msgTextReq__LzAlq\",\"msgTextRes\":\"PersonalChat_msgTextRes__NTBGx\",\"date\":\"PersonalChat_date__U0Q2Z\",\"dateRes\":\"PersonalChat_dateRes__aVbc3 PersonalChat_date__U0Q2Z\",\"msgForm\":\"PersonalChat_msgForm__AG70i\",\"form\":\"PersonalChat_form__Yl3VI\",\"input\":\"PersonalChat_input__P+00r\",\"btn\":\"PersonalChat_btn__TzcFy\"};","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.chucknorris.io';\n\nexport const getChuckNorrisRes = async () => {\n  const response = await axios.get(`/jokes/random`);\n  return response.data;\n};\n","import { useParams } from 'react-router-dom';\nimport { useState, useRef, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { getChatsList, addMessage } from 'redux/chats';\n\nimport s from './PersonalChat.module.css';\n\nimport { BsCheckCircle } from 'react-icons/bs';\nimport { MdOutlineSend } from 'react-icons/md';\n\nimport { getChuckNorrisRes } from 'redux/Api';\n\nconst PersonalChat = () => {\n  const [error, setError] = useState(false);\n  const [message, setMessage] = useState('');\n  const { id } = useParams();\n\n  const contacts = useSelector(getChatsList);\n\n  const dispatch = useDispatch();\n\n  let myRef = useRef();\n\n  const { avatar, name, isCheck, messages } = contacts.find(el => el.id === id);\n\n  const options = {\n    year: 'numeric',\n    month: 'numeric',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true,\n  };\n\n  useEffect(() => {\n    if (messages.length !== 0) {\n      myRef.current?.scrollIntoView();\n    }\n  }, [messages]);\n\n  async function fetchChuckNorrisJoke() {\n    try {\n      const joke = await getChuckNorrisRes();\n      const date = new Date();\n      dispatch(\n        addMessage({\n          id: messages.length * 2,\n          msgText: joke.value,\n          date: date.toLocaleString('en-US', options),\n          chatId: id,\n        })\n      );\n    } catch (error) {\n      setError(true);\n    }\n  }\n\n  const onSendMessage = evt => {\n    evt.preventDefault();\n    const date = new Date();\n\n    dispatch(\n      addMessage({\n        id:\n          messages.length % 2 === 0 ? messages.length + 1 : messages.length + 2,\n        msgText: message,\n        date: date.toLocaleString('en-US', options),\n        chatId: id,\n      })\n    );\n\n    setTimeout(() => {\n      fetchChuckNorrisJoke();\n    }, 10000);\n\n    setMessage('');\n  };\n\n  const checkStatus = isCheck ? s.isCheck : s.isNotCheck;\n\n  return (\n    <>\n      {error && alert('Oop! Something went wrong! Try again later!')}\n      <div className={s.content}>\n        <div className={s.user}>\n          <span className={s.avatarWrap}>\n            <img\n              className={s.avatar}\n              src={avatar}\n              alt=\"User avatar\"\n              width=\"55\"\n            />\n            <BsCheckCircle size=\"18px\" className={checkStatus} />\n          </span>\n          <span className={s.name}>{name}</span>\n        </div>\n        <div className={s.chat}>\n          <ul className={s.msgList}>\n            {messages.map(message => (\n              <li key={message.id} ref={myRef} className={s.msg}>\n                {message.id % 2 === 0 && (\n                  <img\n                    className={s.avatar}\n                    src={avatar}\n                    alt=\"User avatar\"\n                    width=\"55\"\n                  />\n                )}\n                <div\n                  className={message.id % 2 !== 0 ? s.msgWrapReq : s.msgWrapRes}\n                >\n                  <p\n                    className={\n                      message.id % 2 !== 0 ? s.msgTextReq : s.msgTextRes\n                    }\n                  >\n                    {message.msgText}\n                  </p>\n                  <p className={message.id % 2 !== 0 ? s.date : s.dateRes}>\n                    {message.date}\n                  </p>\n                </div>\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div className={s.msgForm}>\n          <form onSubmit={onSendMessage} className={s.form}>\n            <input\n              className={s.input}\n              type=\"text\"\n              name=\"message\"\n              placeholder=\"Type your message\"\n              value={message}\n              onChange={e => setMessage(e.target.value)}\n              required\n            />\n            <button type=\"submit\" className={s.btn}>\n              <MdOutlineSend size=\"24px\" className={s.btnIcon} />\n            </button>\n          </form>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default PersonalChat;\n"],"names":["axios","getChuckNorrisRes","response","data","useState","error","setError","message","setMessage","id","useParams","contacts","useSelector","getChatsList","dispatch","useDispatch","myRef","useRef","find","el","avatar","name","isCheck","messages","options","year","month","day","hour","minute","hour12","joke","date","Date","addMessage","length","msgText","value","toLocaleString","chatId","useEffect","current","scrollIntoView","checkStatus","s","alert","className","src","alt","width","size","map","ref","onSubmit","evt","preventDefault","setTimeout","fetchChuckNorrisJoke","type","placeholder","onChange","e","target","required"],"sourceRoot":""}